Groovehack.module("Entities", function(Entities, Groovehack) {
  var API, initializeArtists;
  Entities.Artist = Backbone.Model.extend({
    urlRoot: "/api/artists",
    defaults: {
      name: "Name"
    }
  });
  Entities.ArtistCollection = Backbone.Collection.extend({
    url: "/api/artists",
    model: Entities.Artist,
    comparator: "name"
  });
  initializeArtists = function() {
    var artists;
    artists = new Entities.ArtistCollection([
      {
        id: 1,
        name: "Artist 1"
      }, {
        id: 2,
        name: "Artist 2"
      }
    ]);
    artists.forEach(function(artist) {
      return artist.save();
    });
    return artists.models;
  };
  API = {
    getArtistEntities: function() {
      var artists, defer, promise;
      artists = new Entities.ArtistCollection();
      defer = $.Deferred();
      artists.fetch({
        success: function(data) {
          return defer.resolve(data);
        }
      });
      promise = defer.promise();
      $.when(promise).done(function(artists) {
        var models;
        if (artists.length === 0) {
          models = initializeArtists();
          return artists.reset(models);
        }
      });
      return promise;
    },
    getArtistEntity: function(artistId) {
      var artist, defer;
      artist = new Entities.Artist({
        id: artistId
      });
      defer = $.Deferred();
      setTimeout(function() {
        return artist.fetch({
          success: function(data) {
            return defer.resolve(data);
          },
          error: function(data) {
            return defer.resolve(void 0);
          }
        });
      }, 2000);
      return defer.promise();
    }
  };
  Groovehack.reqres.setHandler("artist:entities", function() {
    return API.getArtistEntities();
  });
  Groovehack.reqres.setHandler("artist:entity", function() {
    return API.getArtistEntity();
  });
  return this;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudGl0aWVzL2FydGlzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsVUFBVSxDQUFDLE1BQVgsQ0FBa0IsVUFBbEIsRUFBOEIsU0FBQyxRQUFELEVBQVcsVUFBWCxHQUFBO0FBRTdCLE1BQUEsc0JBQUE7QUFBQSxFQUFBLFFBQVEsQ0FBQyxNQUFULEdBQWtCLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBZixDQUVqQjtBQUFBLElBQUEsT0FBQSxFQUFTLGNBQVQ7QUFBQSxJQUVBLFFBQUEsRUFDQztBQUFBLE1BQUEsSUFBQSxFQUFNLE1BQU47S0FIRDtHQUZpQixDQUFsQixDQUFBO0FBQUEsRUFTQSxRQUFRLENBQUMsZ0JBQVQsR0FBNEIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFwQixDQUMzQjtBQUFBLElBQUEsR0FBQSxFQUFLLGNBQUw7QUFBQSxJQUNBLEtBQUEsRUFBTyxRQUFRLENBQUMsTUFEaEI7QUFBQSxJQUVBLFVBQUEsRUFBWSxNQUZaO0dBRDJCLENBVDVCLENBQUE7QUFBQSxFQWlCQSxpQkFBQSxHQUFvQixTQUFBLEdBQUE7QUFDbkIsUUFBQSxPQUFBO0FBQUEsSUFBQSxPQUFBLEdBQWMsSUFBQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEI7TUFDckM7QUFBQSxRQUFBLEVBQUEsRUFBSSxDQUFKO0FBQUEsUUFBTyxJQUFBLEVBQU0sVUFBYjtPQURxQyxFQUVyQztBQUFBLFFBQUEsRUFBQSxFQUFJLENBQUo7QUFBQSxRQUFPLElBQUEsRUFBTSxVQUFiO09BRnFDO0tBQTFCLENBQWQsQ0FBQTtBQUFBLElBSUEsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsU0FBQyxNQUFELEdBQUE7YUFDZixNQUFNLENBQUMsSUFBUCxDQUFBLEVBRGU7SUFBQSxDQUFoQixDQUpBLENBQUE7V0FNQSxPQUFPLENBQUMsT0FQVztFQUFBLENBakJwQixDQUFBO0FBQUEsRUEwQkEsR0FBQSxHQUVDO0FBQUEsSUFBQSxpQkFBQSxFQUFtQixTQUFBLEdBQUE7QUFDbEIsVUFBQSx1QkFBQTtBQUFBLE1BQUEsT0FBQSxHQUFjLElBQUEsUUFBUSxDQUFDLGdCQUFULENBQUEsQ0FBZCxDQUFBO0FBQUEsTUFDQSxLQUFBLEdBQVEsQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQURSLENBQUE7QUFBQSxNQUVBLE9BQU8sQ0FBQyxLQUFSLENBQ0M7QUFBQSxRQUFBLE9BQUEsRUFBUyxTQUFDLElBQUQsR0FBQTtpQkFDUixLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsRUFEUTtRQUFBLENBQVQ7T0FERCxDQUZBLENBQUE7QUFBQSxNQUtBLE9BQUEsR0FBVSxLQUFLLENBQUMsT0FBTixDQUFBLENBTFYsQ0FBQTtBQUFBLE1BTUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQLENBQWUsQ0FBQyxJQUFoQixDQUFxQixTQUFDLE9BQUQsR0FBQTtBQUNwQixZQUFBLE1BQUE7QUFBQSxRQUFBLElBQUcsT0FBTyxDQUFDLE1BQVIsS0FBa0IsQ0FBckI7QUFDQyxVQUFBLE1BQUEsR0FBUyxpQkFBQSxDQUFBLENBQVQsQ0FBQTtpQkFDQSxPQUFPLENBQUMsS0FBUixDQUFjLE1BQWQsRUFGRDtTQURvQjtNQUFBLENBQXJCLENBTkEsQ0FBQTthQVVBLFFBWGtCO0lBQUEsQ0FBbkI7QUFBQSxJQWFBLGVBQUEsRUFBaUIsU0FBQyxRQUFELEdBQUE7QUFDaEIsVUFBQSxhQUFBO0FBQUEsTUFBQSxNQUFBLEdBQWEsSUFBQSxRQUFRLENBQUMsTUFBVCxDQUFnQjtBQUFBLFFBQUEsRUFBQSxFQUFJLFFBQUo7T0FBaEIsQ0FBYixDQUFBO0FBQUEsTUFDQSxLQUFBLEdBQVEsQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQURSLENBQUE7QUFBQSxNQUVBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7ZUFDVixNQUFNLENBQUMsS0FBUCxDQUNDO0FBQUEsVUFBQSxPQUFBLEVBQVMsU0FBQyxJQUFELEdBQUE7bUJBQ1IsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLEVBRFE7VUFBQSxDQUFUO0FBQUEsVUFFQSxLQUFBLEVBQU8sU0FBQyxJQUFELEdBQUE7bUJBQ04sS0FBSyxDQUFDLE9BQU4sQ0FBYyxNQUFkLEVBRE07VUFBQSxDQUZQO1NBREQsRUFEVTtNQUFBLENBQVgsRUFNRSxJQU5GLENBRkEsQ0FBQTthQVNBLEtBQUssQ0FBQyxPQUFOLENBQUEsRUFWZ0I7SUFBQSxDQWJqQjtHQTVCRCxDQUFBO0FBQUEsRUFxREEsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFsQixDQUE2QixpQkFBN0IsRUFBZ0QsU0FBQSxHQUFBO1dBQy9DLEdBQUcsQ0FBQyxpQkFBSixDQUFBLEVBRCtDO0VBQUEsQ0FBaEQsQ0FyREEsQ0FBQTtBQUFBLEVBd0RBLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBbEIsQ0FBNkIsZUFBN0IsRUFBOEMsU0FBQSxHQUFBO1dBQzdDLEdBQUcsQ0FBQyxlQUFKLENBQUEsRUFENkM7RUFBQSxDQUE5QyxDQXhEQSxDQUFBO1NBMkRBLEtBN0Q2QjtBQUFBLENBQTlCLENBQUEsQ0FBQSIsImZpbGUiOiJlbnRpdGllcy9hcnRpc3QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJHcm9vdmVoYWNrLm1vZHVsZSBcIkVudGl0aWVzXCIsIChFbnRpdGllcywgR3Jvb3ZlaGFjaykgLT5cblxuXHRFbnRpdGllcy5BcnRpc3QgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmRcblxuXHRcdHVybFJvb3Q6IFwiL2FwaS9hcnRpc3RzXCJcblxuXHRcdGRlZmF1bHRzOlxuXHRcdFx0bmFtZTogXCJOYW1lXCJcblxuXHQjRW50aXRpZXMuY29uZmlndXJlU3RvcmFnZSBFbnRpdGllcy5BcnRpc3RcblxuXHRFbnRpdGllcy5BcnRpc3RDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmRcblx0XHR1cmw6IFwiL2FwaS9hcnRpc3RzXCJcblx0XHRtb2RlbDogRW50aXRpZXMuQXJ0aXN0XG5cdFx0Y29tcGFyYXRvcjogXCJuYW1lXCJcblxuXG5cdCNFbnRpdGllcy5jb25maWd1cmVTdG9yYWdlIEVudGl0aWVzLkFydGlzdENvbGxlY3Rpb25cblxuXHRpbml0aWFsaXplQXJ0aXN0cyA9IC0+XG5cdFx0YXJ0aXN0cyA9IG5ldyBFbnRpdGllcy5BcnRpc3RDb2xsZWN0aW9uIFtcblx0XHRcdCggaWQ6IDEsIG5hbWU6IFwiQXJ0aXN0IDFcIiApXG5cdFx0XHQoIGlkOiAyLCBuYW1lOiBcIkFydGlzdCAyXCIgKVxuXHRcdF1cblx0XHRhcnRpc3RzLmZvckVhY2ggKGFydGlzdCkgLT5cblx0XHRcdGFydGlzdC5zYXZlKClcblx0XHRhcnRpc3RzLm1vZGVsc1xuXG5cdEFQSSA9XG5cblx0XHRnZXRBcnRpc3RFbnRpdGllczogLT5cblx0XHRcdGFydGlzdHMgPSBuZXcgRW50aXRpZXMuQXJ0aXN0Q29sbGVjdGlvbigpXG5cdFx0XHRkZWZlciA9ICQuRGVmZXJyZWQoKVxuXHRcdFx0YXJ0aXN0cy5mZXRjaFxuXHRcdFx0XHRzdWNjZXNzOiAoZGF0YSkgLT5cblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlKGRhdGEpXG5cdFx0XHRwcm9taXNlID0gZGVmZXIucHJvbWlzZSgpXG5cdFx0XHQkLndoZW4ocHJvbWlzZSkuZG9uZSAoYXJ0aXN0cykgLT5cblx0XHRcdFx0aWYgYXJ0aXN0cy5sZW5ndGggaXMgMFxuXHRcdFx0XHRcdG1vZGVscyA9IGluaXRpYWxpemVBcnRpc3RzKClcblx0XHRcdFx0XHRhcnRpc3RzLnJlc2V0KG1vZGVscylcblx0XHRcdHByb21pc2VcblxuXHRcdGdldEFydGlzdEVudGl0eTogKGFydGlzdElkKSAtPlxuXHRcdFx0YXJ0aXN0ID0gbmV3IEVudGl0aWVzLkFydGlzdCBpZDogYXJ0aXN0SWRcblx0XHRcdGRlZmVyID0gJC5EZWZlcnJlZCgpXG5cdFx0XHRzZXRUaW1lb3V0IC0+XG5cdFx0XHRcdGFydGlzdC5mZXRjaFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IChkYXRhKSAtPlxuXHRcdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZSBkYXRhXG5cdFx0XHRcdFx0ZXJyb3I6IChkYXRhKSAtPlxuXHRcdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZSB1bmRlZmluZWRcblx0XHRcdCwgMjAwMFxuXHRcdFx0ZGVmZXIucHJvbWlzZSgpXG5cblx0R3Jvb3ZlaGFjay5yZXFyZXMuc2V0SGFuZGxlciBcImFydGlzdDplbnRpdGllc1wiLCAtPlxuXHRcdEFQSS5nZXRBcnRpc3RFbnRpdGllcygpXG5cblx0R3Jvb3ZlaGFjay5yZXFyZXMuc2V0SGFuZGxlciBcImFydGlzdDplbnRpdHlcIiwgLT5cblx0XHRBUEkuZ2V0QXJ0aXN0RW50aXR5KClcblxuXHRAIl19