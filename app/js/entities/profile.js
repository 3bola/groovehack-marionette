Groovehack.module("Entities", function(Entities, Groovehack) {
  var API, initializeProfiles;
  Entities.Profile = Backbone.Model.extend({
    urlRoot: "profiles",
    defaults: {
      name: "Name",
      type: "type"
    }
  });
  Entities.configureStorage(Entities.Profile);
  Entities.ProfileCollection = Backbone.Collection.extend({
    url: "profiles",
    model: Entities.Profile,
    comparator: "name"
  });
  Entities.configureStorage(Entities.ProfileCollection);
  initializeProfiles = function() {
    var profiles;
    profiles = new Entities.ProfileCollection([
      {
        id: 1,
        name: "Foo",
        type: "artist"
      }, {
        id: 2,
        name: "Bar",
        type: "venue"
      }
    ]);
    profiles.forEach(function(profile) {
      return profile.save();
    });
    return profiles.models;
  };
  API = {
    getProfileEntities: function() {
      var defer, profiles, promise;
      profiles = new Entities.ProfileCollection();
      defer = $.Deferred();
      profiles.fetch({
        success: function(data) {
          return defer.resolve(data);
        }
      });
      promise = defer.promise();
      $.when(promise).done(function(profiles) {
        var models;
        if (profiles.length === 0) {
          models = initializeProfiles();
          return profiles.reset(models);
        }
      });
      return promise;
    },
    getProfileEntity: function(profileId) {
      var defer, profile;
      profile = new Entities.Profile({
        id: profileId
      });
      defer = $.Deferred();
      setTimeout(function() {
        return profile.fetch({
          success: function(data) {
            return defer.resolve(data);
          },
          error: function(data) {
            return defer.resolve(void 0);
          }
        });
      }, 2000);
      return defer.promise();
    }
  };
  Groovehack.reqres.setHandler("profile:entities", function() {
    return API.getProfileEntities();
  });
  Groovehack.reqres.setHandler("profile:entity", function() {
    return API.getProfileEntity();
  });
  return this;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudGl0aWVzL3Byb2ZpbGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsQ0FBQyxNQUFYLENBQWtCLFVBQWxCLEVBQThCLFNBQUMsUUFBRCxFQUFXLFVBQVgsR0FBQTtBQUU3QixNQUFBLHVCQUFBO0FBQUEsRUFBQSxRQUFRLENBQUMsT0FBVCxHQUFtQixRQUFRLENBQUMsS0FBSyxDQUFDLE1BQWYsQ0FFbEI7QUFBQSxJQUFBLE9BQUEsRUFBUyxVQUFUO0FBQUEsSUFFQSxRQUFBLEVBQ0M7QUFBQSxNQUFBLElBQUEsRUFBTSxNQUFOO0FBQUEsTUFDQSxJQUFBLEVBQU0sTUFETjtLQUhEO0dBRmtCLENBQW5CLENBQUE7QUFBQSxFQVFBLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixRQUFRLENBQUMsT0FBbkMsQ0FSQSxDQUFBO0FBQUEsRUFVQSxRQUFRLENBQUMsaUJBQVQsR0FBNkIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFwQixDQUM1QjtBQUFBLElBQUEsR0FBQSxFQUFLLFVBQUw7QUFBQSxJQUNBLEtBQUEsRUFBTyxRQUFRLENBQUMsT0FEaEI7QUFBQSxJQUVBLFVBQUEsRUFBWSxNQUZaO0dBRDRCLENBVjdCLENBQUE7QUFBQSxFQWdCQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsUUFBUSxDQUFDLGlCQUFuQyxDQWhCQSxDQUFBO0FBQUEsRUFrQkEsa0JBQUEsR0FBcUIsU0FBQSxHQUFBO0FBQ3BCLFFBQUEsUUFBQTtBQUFBLElBQUEsUUFBQSxHQUFlLElBQUEsUUFBUSxDQUFDLGlCQUFULENBQTJCO01BQ3ZDO0FBQUEsUUFBQSxFQUFBLEVBQUksQ0FBSjtBQUFBLFFBQU8sSUFBQSxFQUFNLEtBQWI7QUFBQSxRQUFvQixJQUFBLEVBQU0sUUFBMUI7T0FEdUMsRUFFdkM7QUFBQSxRQUFBLEVBQUEsRUFBSSxDQUFKO0FBQUEsUUFBTyxJQUFBLEVBQU0sS0FBYjtBQUFBLFFBQW9CLElBQUEsRUFBTSxPQUExQjtPQUZ1QztLQUEzQixDQUFmLENBQUE7QUFBQSxJQUlBLFFBQVEsQ0FBQyxPQUFULENBQWlCLFNBQUMsT0FBRCxHQUFBO2FBQ2hCLE9BQU8sQ0FBQyxJQUFSLENBQUEsRUFEZ0I7SUFBQSxDQUFqQixDQUpBLENBQUE7V0FNQSxRQUFRLENBQUMsT0FQVztFQUFBLENBbEJyQixDQUFBO0FBQUEsRUEyQkEsR0FBQSxHQUVDO0FBQUEsSUFBQSxrQkFBQSxFQUFvQixTQUFBLEdBQUE7QUFDbkIsVUFBQSx3QkFBQTtBQUFBLE1BQUEsUUFBQSxHQUFlLElBQUEsUUFBUSxDQUFDLGlCQUFULENBQUEsQ0FBZixDQUFBO0FBQUEsTUFDQSxLQUFBLEdBQVEsQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQURSLENBQUE7QUFBQSxNQUVBLFFBQVEsQ0FBQyxLQUFULENBQ0M7QUFBQSxRQUFBLE9BQUEsRUFBUyxTQUFDLElBQUQsR0FBQTtpQkFDUixLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsRUFEUTtRQUFBLENBQVQ7T0FERCxDQUZBLENBQUE7QUFBQSxNQUtBLE9BQUEsR0FBVSxLQUFLLENBQUMsT0FBTixDQUFBLENBTFYsQ0FBQTtBQUFBLE1BTUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQLENBQWUsQ0FBQyxJQUFoQixDQUFxQixTQUFDLFFBQUQsR0FBQTtBQUNwQixZQUFBLE1BQUE7QUFBQSxRQUFBLElBQUcsUUFBUSxDQUFDLE1BQVQsS0FBbUIsQ0FBdEI7QUFDQyxVQUFBLE1BQUEsR0FBUyxrQkFBQSxDQUFBLENBQVQsQ0FBQTtpQkFDQSxRQUFRLENBQUMsS0FBVCxDQUFlLE1BQWYsRUFGRDtTQURvQjtNQUFBLENBQXJCLENBTkEsQ0FBQTthQVVBLFFBWG1CO0lBQUEsQ0FBcEI7QUFBQSxJQWFBLGdCQUFBLEVBQWtCLFNBQUMsU0FBRCxHQUFBO0FBQ2pCLFVBQUEsY0FBQTtBQUFBLE1BQUEsT0FBQSxHQUFjLElBQUEsUUFBUSxDQUFDLE9BQVQsQ0FBaUI7QUFBQSxRQUFBLEVBQUEsRUFBSSxTQUFKO09BQWpCLENBQWQsQ0FBQTtBQUFBLE1BQ0EsS0FBQSxHQUFRLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FEUixDQUFBO0FBQUEsTUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO2VBQ1YsT0FBTyxDQUFDLEtBQVIsQ0FDQztBQUFBLFVBQUEsT0FBQSxFQUFTLFNBQUMsSUFBRCxHQUFBO21CQUNSLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxFQURRO1VBQUEsQ0FBVDtBQUFBLFVBRUEsS0FBQSxFQUFPLFNBQUMsSUFBRCxHQUFBO21CQUNOLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZCxFQURNO1VBQUEsQ0FGUDtTQURELEVBRFU7TUFBQSxDQUFYLEVBTUUsSUFORixDQUZBLENBQUE7YUFTQSxLQUFLLENBQUMsT0FBTixDQUFBLEVBVmlCO0lBQUEsQ0FibEI7R0E3QkQsQ0FBQTtBQUFBLEVBc0RBLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBbEIsQ0FBNkIsa0JBQTdCLEVBQWlELFNBQUEsR0FBQTtXQUNoRCxHQUFHLENBQUMsa0JBQUosQ0FBQSxFQURnRDtFQUFBLENBQWpELENBdERBLENBQUE7QUFBQSxFQXlEQSxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQWxCLENBQTZCLGdCQUE3QixFQUErQyxTQUFBLEdBQUE7V0FDOUMsR0FBRyxDQUFDLGdCQUFKLENBQUEsRUFEOEM7RUFBQSxDQUEvQyxDQXpEQSxDQUFBO1NBNERBLEtBOUQ2QjtBQUFBLENBQTlCLENBQUEsQ0FBQSIsImZpbGUiOiJlbnRpdGllcy9wcm9maWxlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiR3Jvb3ZlaGFjay5tb2R1bGUgXCJFbnRpdGllc1wiLCAoRW50aXRpZXMsIEdyb292ZWhhY2spIC0+XG5cblx0RW50aXRpZXMuUHJvZmlsZSA9IEJhY2tib25lLk1vZGVsLmV4dGVuZFxuXG5cdFx0dXJsUm9vdDogXCJwcm9maWxlc1wiXG5cblx0XHRkZWZhdWx0czpcblx0XHRcdG5hbWU6IFwiTmFtZVwiXG5cdFx0XHR0eXBlOiBcInR5cGVcIlxuXG5cdEVudGl0aWVzLmNvbmZpZ3VyZVN0b3JhZ2UgRW50aXRpZXMuUHJvZmlsZVxuXG5cdEVudGl0aWVzLlByb2ZpbGVDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmRcblx0XHR1cmw6IFwicHJvZmlsZXNcIlxuXHRcdG1vZGVsOiBFbnRpdGllcy5Qcm9maWxlXG5cdFx0Y29tcGFyYXRvcjogXCJuYW1lXCJcblxuXG5cdEVudGl0aWVzLmNvbmZpZ3VyZVN0b3JhZ2UgRW50aXRpZXMuUHJvZmlsZUNvbGxlY3Rpb25cblxuXHRpbml0aWFsaXplUHJvZmlsZXMgPSAtPlxuXHRcdHByb2ZpbGVzID0gbmV3IEVudGl0aWVzLlByb2ZpbGVDb2xsZWN0aW9uIFtcblx0XHRcdCggaWQ6IDEsIG5hbWU6IFwiRm9vXCIsIHR5cGU6IFwiYXJ0aXN0XCIgKVxuXHRcdFx0KCBpZDogMiwgbmFtZTogXCJCYXJcIiwgdHlwZTogXCJ2ZW51ZVwiIClcblx0XHRdXG5cdFx0cHJvZmlsZXMuZm9yRWFjaCAocHJvZmlsZSkgLT5cblx0XHRcdHByb2ZpbGUuc2F2ZSgpXG5cdFx0cHJvZmlsZXMubW9kZWxzXG5cblx0QVBJID1cblxuXHRcdGdldFByb2ZpbGVFbnRpdGllczogLT5cblx0XHRcdHByb2ZpbGVzID0gbmV3IEVudGl0aWVzLlByb2ZpbGVDb2xsZWN0aW9uKClcblx0XHRcdGRlZmVyID0gJC5EZWZlcnJlZCgpXG5cdFx0XHRwcm9maWxlcy5mZXRjaFxuXHRcdFx0XHRzdWNjZXNzOiAoZGF0YSkgLT5cblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlKGRhdGEpXG5cdFx0XHRwcm9taXNlID0gZGVmZXIucHJvbWlzZSgpXG5cdFx0XHQkLndoZW4ocHJvbWlzZSkuZG9uZSAocHJvZmlsZXMpIC0+XG5cdFx0XHRcdGlmIHByb2ZpbGVzLmxlbmd0aCBpcyAwXG5cdFx0XHRcdFx0bW9kZWxzID0gaW5pdGlhbGl6ZVByb2ZpbGVzKClcblx0XHRcdFx0XHRwcm9maWxlcy5yZXNldChtb2RlbHMpXG5cdFx0XHRwcm9taXNlXG5cblx0XHRnZXRQcm9maWxlRW50aXR5OiAocHJvZmlsZUlkKSAtPlxuXHRcdFx0cHJvZmlsZSA9IG5ldyBFbnRpdGllcy5Qcm9maWxlIGlkOiBwcm9maWxlSWRcblx0XHRcdGRlZmVyID0gJC5EZWZlcnJlZCgpXG5cdFx0XHRzZXRUaW1lb3V0IC0+XG5cdFx0XHRcdHByb2ZpbGUuZmV0Y2hcblx0XHRcdFx0XHRzdWNjZXNzOiAoZGF0YSkgLT5cblx0XHRcdFx0XHRcdGRlZmVyLnJlc29sdmUgZGF0YVxuXHRcdFx0XHRcdGVycm9yOiAoZGF0YSkgLT5cblx0XHRcdFx0XHRcdGRlZmVyLnJlc29sdmUgdW5kZWZpbmVkXG5cdFx0XHQsIDIwMDBcblx0XHRcdGRlZmVyLnByb21pc2UoKVxuXG5cdEdyb292ZWhhY2sucmVxcmVzLnNldEhhbmRsZXIgXCJwcm9maWxlOmVudGl0aWVzXCIsIC0+XG5cdFx0QVBJLmdldFByb2ZpbGVFbnRpdGllcygpXG5cblx0R3Jvb3ZlaGFjay5yZXFyZXMuc2V0SGFuZGxlciBcInByb2ZpbGU6ZW50aXR5XCIsIC0+XG5cdFx0QVBJLmdldFByb2ZpbGVFbnRpdHkoKVxuXG5cdEAiXX0=