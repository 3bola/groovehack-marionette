Groovehack.module("Entities", function(Entities, Groovehack) {
  var API, initializeSets;
  Entities.Set = Backbone.Model.extend({
    urlRoot: "/api/sets",
    defaults: {
      name: "Set"
    }
  });
  Entities.SetCollection = Backbone.Collection.extend({
    url: "/api/sets",
    model: Entities.Set,
    comparator: "name"
  });
  initializeSets = function() {
    var sets;
    sets = new Entities.SetCollection([
      {
        id: 1,
        name: "Set 1"
      }, {
        id: 2,
        name: "Set 2"
      }
    ]);
    sets.forEach(function(set) {
      return set.save();
    });
    return sets.models;
  };
  API = {
    getSetEntities: function() {
      var defer, promise, sets;
      sets = new Entities.SetCollection();
      defer = $.Deferred();
      sets.fetch({
        success: function(data) {
          return defer.resolve(data);
        }
      });
      promise = defer.promise();
      $.when(promise).done(function(sets) {
        var models;
        if (sets.length === 0) {
          models = initializeSets();
          return sets.reset(models);
        }
      });
      return promise;
    },
    getSetEntity: function(setId) {
      var defer, set;
      set = new Entities.Set({
        id: setId
      });
      defer = $.Deferred();
      set.fetch({
        success: function(data) {
          return defer.resolve(data);
        },
        error: function(data) {
          return defer.resolve(void 0);
        }
      });
      return defer.promise();
    }
  };
  Groovehack.reqres.setHandler("set:entities", function() {
    return API.getSetEntities();
  });
  Groovehack.reqres.setHandler("set:entity", function() {
    return API.getSetEntity();
  });
  return this;
});

//# sourceMappingURL=data:application/json;base64,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O1FBQUEsQ0FGUDtPQURELENBRkEsQ0FBQTthQU9BLEtBQUssQ0FBQyxPQUFOLENBQUEsRUFSYTtJQUFBLENBYmQ7R0EzQkQsQ0FBQTtBQUFBLEVBa0RBLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBbEIsQ0FBNkIsY0FBN0IsRUFBNkMsU0FBQSxHQUFBO1dBQzVDLEdBQUcsQ0FBQyxjQUFKLENBQUEsRUFENEM7RUFBQSxDQUE3QyxDQWxEQSxDQUFBO0FBQUEsRUFxREEsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFsQixDQUE2QixZQUE3QixFQUEyQyxTQUFBLEdBQUE7V0FDMUMsR0FBRyxDQUFDLFlBQUosQ0FBQSxFQUQwQztFQUFBLENBQTNDLENBckRBLENBQUE7U0F3REEsS0ExRDZCO0FBQUEsQ0FBOUIsQ0FBQSxDQUFBIiwiZmlsZSI6ImVudGl0aWVzL3NldC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkdyb292ZWhhY2subW9kdWxlIFwiRW50aXRpZXNcIiwgKEVudGl0aWVzLCBHcm9vdmVoYWNrKSAtPlxuXG5cdEVudGl0aWVzLlNldCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZFxuXG5cdFx0dXJsUm9vdDogXCIvYXBpL3NldHNcIlxuXG5cdFx0ZGVmYXVsdHM6XG5cdFx0XHRuYW1lOiBcIlNldFwiXG5cblx0I0VudGl0aWVzLmNvbmZpZ3VyZVN0b3JhZ2UgRW50aXRpZXMuU2V0XG5cblx0RW50aXRpZXMuU2V0Q29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kXG5cdFx0dXJsOiBcIi9hcGkvc2V0c1wiXG5cdFx0bW9kZWw6IEVudGl0aWVzLlNldFxuXHRcdGNvbXBhcmF0b3I6IFwibmFtZVwiXG5cblx0I0VudGl0aWVzLmNvbmZpZ3VyZVN0b3JhZ2UgRW50aXRpZXMuU2V0Q29sbGVjdGlvblxuXG5cdGluaXRpYWxpemVTZXRzID0gLT5cblx0XHRzZXRzID0gbmV3IEVudGl0aWVzLlNldENvbGxlY3Rpb24gW1xuXHRcdFx0KCBpZDogMSwgbmFtZTogXCJTZXQgMVwiIClcblx0XHRcdCggaWQ6IDIsIG5hbWU6IFwiU2V0IDJcIiApXG5cdFx0XVxuXHRcdHNldHMuZm9yRWFjaCAoc2V0KSAtPlxuXHRcdFx0c2V0LnNhdmUoKVxuXHRcdHNldHMubW9kZWxzXG5cblx0QVBJID1cblxuXHRcdGdldFNldEVudGl0aWVzOiAtPlxuXHRcdFx0c2V0cyA9IG5ldyBFbnRpdGllcy5TZXRDb2xsZWN0aW9uKClcblx0XHRcdGRlZmVyID0gJC5EZWZlcnJlZCgpXG5cdFx0XHRzZXRzLmZldGNoXG5cdFx0XHRcdHN1Y2Nlc3M6IChkYXRhKSAtPlxuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmUoZGF0YSlcblx0XHRcdHByb21pc2UgPSBkZWZlci5wcm9taXNlKClcblx0XHRcdCQud2hlbihwcm9taXNlKS5kb25lIChzZXRzKSAtPlxuXHRcdFx0XHRpZiBzZXRzLmxlbmd0aCBpcyAwXG5cdFx0XHRcdFx0bW9kZWxzID0gaW5pdGlhbGl6ZVNldHMoKVxuXHRcdFx0XHRcdHNldHMucmVzZXQobW9kZWxzKVxuXHRcdFx0cHJvbWlzZVxuXG5cdFx0Z2V0U2V0RW50aXR5OiAoc2V0SWQpIC0+XG5cdFx0XHRzZXQgPSBuZXcgRW50aXRpZXMuU2V0IGlkOiBzZXRJZFxuXHRcdFx0ZGVmZXIgPSAkLkRlZmVycmVkKClcblx0XHRcdHNldC5mZXRjaFxuXHRcdFx0XHRzdWNjZXNzOiAoZGF0YSkgLT5cblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlIGRhdGFcblx0XHRcdFx0ZXJyb3I6IChkYXRhKSAtPlxuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmUgdW5kZWZpbmVkXG5cdFx0XHRkZWZlci5wcm9taXNlKClcblxuXHRHcm9vdmVoYWNrLnJlcXJlcy5zZXRIYW5kbGVyIFwic2V0OmVudGl0aWVzXCIsIC0+XG5cdFx0QVBJLmdldFNldEVudGl0aWVzKClcblxuXHRHcm9vdmVoYWNrLnJlcXJlcy5zZXRIYW5kbGVyIFwic2V0OmVudGl0eVwiLCAtPlxuXHRcdEFQSS5nZXRTZXRFbnRpdHkoKVxuXG5cdEAiXX0=