Groovehack.module('SetsApp', function(SetsApp, Groovehack) {
  var API;
  SetsApp.Router = Marionette.AppRouter.extend({
    appRoutes: {
      "sets": "listSets",
      "sets/:id": "showSet",
      "artists": "listArtists",
      "artist/:id": "showArtist",
      "venues": "listVenues",
      "venue/:id": "showVenue"
    }
  });
  API = {
    listSets: function() {
      SetsApp.List.Controller.listSets();
      return Groovehack.execute("set:active:header", "sets");
    },
    showSet: function(id) {
      SetsApp.Show.Controller.showSet(id);
      return Groovehack.execute("set:active:header", "sets");
    },
    listArtists: function() {
      SetsApp.List.Controller.listArtists();
      return Groovehack.execute("set:active:header", "artists");
    },
    showArtist: function(id) {
      SetsApp.Show.Controller.showArtist(id);
      return Groovehack.execute("set:active:header", "artists");
    },
    listVenues: function() {
      SetsApp.List.Controller.listVenues();
      return Groovehack.execute("set:active:header", "venues");
    },
    showVenue: function(id) {
      SetsApp.Show.Controller.showVenue(id);
      return Groovehack.execute("set:active:header", "venues");
    }
  };
  Groovehack.on("sets:list", function() {
    Groovehack.navigate("sets");
    return API.listSets();
  });
  Groovehack.on("artists:list", function() {
    Groovehack.navigate("artists");
    return API.listArtists();
  });
  Groovehack.on("venues:list", function() {
    Groovehack.navigate("venues");
    return API.listVenues();
  });
  Groovehack.on("set:show", function(id) {
    Groovehack.navigate("set/" + id);
    return API.showSet(id);
  });
  Groovehack.addInitializer(function() {
    return new SetsApp.Router({
      controller: API
    });
  });
  return this;
});

Groovehack.module('SetsApp.List', function(List, Groovehack, Backbone, Marionette, $, _) {
  return List.Controller = {
    listSets: function() {
      var fetchingSets, listLayout, listPanel;
      fetchingSets = Groovehack.request('set:entities');
      listLayout = new List.Layout();
      listPanel = new List.Panel();
      return $.when(fetchingSets).done(function(sets) {
        var setsListView;
        setsListView = new List.List({
          collection: sets
        });
        listLayout.on('show', function() {
          listLayout.panelRegion.show(listPanel);
          return listLayout.listRegion.show(setsListView);
        });
        return Groovehack.mainRegion.show(listLayout);
      });
    },
    listArtists: function() {
      var fetchingArtists, listLayout, listPanel;
      fetchingArtists = Groovehack.request('artist:entities');
      listLayout = new List.Layout();
      listPanel = new List.Panel();
      return $.when(fetchingArtists).done(function(artists) {
        var setsListView;
        setsListView = new List.List({
          collection: artists
        });
        listLayout.on('show', function() {
          listLayout.panelRegion.show(listPanel);
          return listLayout.listRegion.show(setsListView);
        });
        return Groovehack.mainRegion.show(listLayout);
      });
    },
    listVenues: function() {
      var fetchingVenues, listLayout, listPanel;
      fetchingVenues = Groovehack.request('venue:entities');
      listLayout = new List.Layout();
      listPanel = new List.Panel();
      return $.when(fetchingVenues).done(function(venues) {
        var setsListView;
        setsListView = new List.List({
          collection: venues
        });
        listLayout.on('show', function() {
          listLayout.panelRegion.show(listPanel);
          return listLayout.listRegion.show(setsListView);
        });
        return Groovehack.mainRegion.show(listLayout);
      });
    }
  };
});

Groovehack.module('SetsApp.List', function(List, Groovehack, Backbone, Marionette, $, _) {
  List.Layout = Marionette.LayoutView.extend({
    className: 'list-layout',
    template: T.sets.tmpl,
    regions: {
      panelRegion: "#list-panel",
      listRegion: "#list-list"
    }
  });
  List.Panel = Marionette.ItemView.extend({
    className: "panel",
    template: T.sets.list.panel.tmpl
  });
  List.Item = Marionette.ItemView.extend({
    tagName: "li",
    template: T.sets.list.item.tmpl
  });
  return List.List = Marionette.CompositeView.extend({
    className: "list",
    template: T.sets.list.tmpl,
    childView: List.Item,
    childViewContainer: "ul",
    initialize: function() {
      return this.listenTo(this.collection, "reset", function() {
        return this.attachHtml = function(collectionView, childView, index) {
          console.log('item', childView);
          return collectionView.$el.append(childView.el);
        };
      });
    },
    onRenderCollection: function() {
      return this.attachHtml = function(collectionView, childView, index) {
        return collectionView.$el.prepend(childView.el);
      };
    }
  });
});

//# sourceMappingURL=data:application/json;base64,